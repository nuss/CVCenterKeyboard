TITLE:: CVCenterKeyboard
summary:: A MIDI keyboard implementation for CVCenter
categories:: Conductor>CVCenter, External Control>MIDI
related:: Classes/CVCenter, Guides/UsingMIDI, Classes/CVCenterKeyboardRecorder

DESCRIPTION::
A CVCenterKeyboard consists of a collection of SynthDefs and provides a convenient way to play them on a MIDI keyboard.

CVCenterKeyboard lets you create a link::Guides/UsingMIDI#Playing notes on your MIDI keyboard#MIDI keyboard:: layout instantly from any link::Classes/SynthDef:: that provides a code::\gate:: key, meaning that a link::Classes/Synth:: that has been instanced upon receiving a note-on message gets finished when it gets a not-off message from an external MIDI keyboard. That allows for playing sustained notes that can be controlled through code::asr:: or code::adsr:: envelopes. A SynthDef with a "gated" envelope should answer code::true:: on executing the following line:

code::
SynthDescLib.at(yourSynthDefName).hasGate;
::

Beyond the just explained procedure you may add an arbitrary number of other SynthDefs. You may switch between these SynthDefs by calling link::#-setSynthDef::. Playing the keyboard should immediately play generated nodes using the selected SynthDef.

Setting up the keyboard basically involves two steps: First instancing a keyboard (through link::#*new:: or link::#*newSynthDef::) and then setting up the keyboard for a given link::Classes/SynthDef:: through link::#-setUpControls:: (will boot the link::Classes/Server::).

You can assign four arbitray controls from your SynthDef to the following standard parameters:

DEFINITIONLIST::
## outControl
|| the arg that sets the output bus of the Synth
## keyboardControl
|| whatever you want to play with your keyboard (e.g. Frequency). You'll get midi notes back
## velocControl
|| whatever you want to control through keyboard velocity
## bendControl
|| whatever you want to control through the pitch bend wheel (the internal control will automatically assigned a spec code::ControlSpec(0.midicps.neg, 0.midicps, \lin, 0, 0, " hz")::)
::

All other controls you may have defined in your SynthDef will automatically be picked up by the setup process and get assigned appropriate widgets automatically.

NOTE:: Differently to normal usage within CVCenter the link::Classes/Synth:: instances created by playing the keyboard are addressed anonymously when setting their controls. I.e. the Synths are not assigned to a variable which serves as the reference to the Synth instance when setting a control. That means you can use controls of the same name within more than one SynthDef and they will be considered within every playing Synth instance. However, you should think about the link::Classes/ControlSpec::s for your controls beforehand. E.g. if you have an argument code::\freq:: in two different SynthDefs and one should have a range of 20-20000 and the other one 20-4000 the range of the argument that has been created first will take precendence over the second (even if there is more than one widget setting a control code::\freq:: in CVCenter all these widgets will set any control named code::\freq::).
::

Additionally an output proxy - a link::Classes/NodeProxy:: or an link::Classes/Ndef:: - can be added through link::#-addOutProxy:: which allows you to build an effects chain and to do other kinds of NodeProxy trickery.

CLASSMETHODS::

METHOD:: new
Instanciate a new keyboard under code::keyboardName::. The keyboard will be accessible under code::CVCenterKeyboard.all[keyboardName]::
argument:: keyboardDefName
a link::Classes/String:: or link::Classes/Symbol::, denoting the name of the new keyboard
argument:: srcID
Optional - an link::Classes/Integer:: corresponding to the unique ID of the MIDI device. If omitted the keyboard will be usable on any currently connected MIDI keyboard. To find out the unique numeric ID of your MIDI device you could use thefollowing code:
code::
MIDIClient.init;
MIDIClient.sources.do { |source| [source, source.uid].postln };
::
(See also: link::Guides/UsingMIDI#MIDIFunc and MIDIdef: Filtering based on device or message data::)
argument:: chan
Optional - an link::Classes/Integer:: denoting the MIDI channel the keyboard should use. If omitted the keyboard can be played on any MIDI channel (See also: link::Guides/UsingMIDI#MIDIFunc and MIDIdef: Filtering based on device or message data::)
argument:: addRecorder
Optional - this argument will be set to code::true:: by default and adds a sampler that records all keystrokes on the keyboard upon calling link::#-record::. Calling link::#-record:: again will stop recording and the just recorded sequence will immediately start playing. See link::Classes/CVCenterKeyboardRecorder:: for more information on the recording mechanism and the structure of the recorded sequences.
argument:: touchOSCAddr
Optional - a link::Classes/NetAddr:: instance, refering to an installation of a TouchOSC app on a mobile phone or tablet computer. The device must be in the same network as the computer. The IP address must be the device' IP address, the port is the "incoming" port as set in TouchOSC's OSC setup. Included with the distribution of this class (library) you should find a TouchOSC layout that can be edited in the TouchOSCEditor - download at https://hexler.net/touchosc-mk1#resources . The layout is built for a resolution of 800 x 1280 pixels, so you might have to adapt it to the resolution of your device.

NOTE:: You might want to use a different OSC app for control, using different OSC command names. Though the class is named link::Classes/TouchOSC:: it is not necessarily bound to the TouchOSC app. You should be able to set your own command names, either in the class or one of its instances.
::

METHOD:: newSynthDef
Instantiate a new CVCenterKeyboard holding the SynthDef denoted by code::synthDefName::. The SynthDef must have beem compiled in advance.
argument:: synthDefName
A link::Classes/Symbol:: or a link::Classes/String:: denoting the link::Classes/SynthDef:: that should be added to the keyboard. Note that the SynthDef strong::must:: have a gated envelope (i.e. executing code::SynthDescLib.at(synthDefName).hasGate:: must return code::true::. code::synthDefName:: must be given as code::Symbol:: to return the expected result. See link::Classes/EnvGen:: for an explanation of how to create an envelope with a gate).
argument:: keyboardDefName
a link::Classes/String:: or link::Classes/Symbol::, denoting the name of the new keyboard
argument:: srcID
Optional - an link::Classes/Integer:: corresponding to the unique ID of the MIDI device. If omitted the keyboard will be usable on any currently connected MIDI keyboard. See link::#*new:: for how to determine the unique ID of your MIDI device.
(See also: link::Guides/UsingMIDI#MIDIFunc and MIDIdef: Filtering based on device or message data::)
argument:: chan
Optional - an link::Classes/Integer:: denoting the MIDI channel the keyboard should use. If omitted the keyboard can be played on any MIDI channel (See also: link::Guides/UsingMIDI#MIDIFunc and MIDIdef: Filtering based on device or message data::)
argument:: addRecorder
Optional - this argument will be set to code::true:: by default and adds a sampler that records all keystrokes on the keyboard upon calling link::#-record::. Calling link::#-record:: again will stop recording and the just recorded sequence will immediately start playing. See link::Classes/CVCenterKeyboardRecorder:: for more information on the recording mechanism and the structure of the recorded sequences.
argument:: touchOSCAddr
Optional - a NetAddr instance, refering to an installation of a TouchOSC app on a mobile phone or tablet computer. For detailed description see link::#*new:: argument code::touchOSC::.


METHOD:: at
A simple convenience method, same as code::CVCenterKeyboard.all[keyboardDefName]:: except for the fact that code::keyboardDefName:: can be given as link::Classes/String:: as well (will be converted to a link::Classes/Symbol:: internally).
argument:: keyboardDefName
A link::Classes/String:: or link::Classes/Symbol:: denoting the name of the CVCenterKeyboard instance.
returns:: The CVCenterKeyboard instance under the given name if it exists or code::nil::.

METHOD:: all
returns:: an link::Classes/Event::, containing all CVCenterKeyboard instances.

INSTANCEMETHODS::

METHOD:: addSynthDef
Add a new link::Classes/SynthDef:: to an existing CVCenterKeyboard instance. The SynthDef must already have been compiled and contain a gated envelope.
argument:: synthDefName
A link::Classes/String:: or an link::Classes/Symbol::, denoting the name of the SynthDef.

METHOD:: removeSynthDef
Remove a link::Classes/SynthDef:: to an existing CVCenterKeyboard instance.
argument:: synthDefName
A link::Classes/String:: or an link::Classes/Symbol::, denoting the name of the SynthDef.

METHOD:: setUpControls
Whenever a new SynthDef is added, either by creating a new instance by calling code::CVCenter.Keyboard.newSynthDef:: or adding a SynthDef with link::#-addSynthDef::, the CVCenterKeyboard instance must be set up for the new SynthDef. This will configure code::outControl::, code::keyboardControl:: and code::bendControl:: as well as it will create link::Classes/CVWidget::s for all other controls in the SynthDef.
argument:: synthDefName
The link::Classes/SynthDef::'s name, given as link::Classes/Symbol:: or link::Classes/String::
argument:: prefix
An optional link::Classes/Symbol:: or link::Classes/String:: for link::Classes/CVCenter::, to make sure the resulting widgets get a unique name.
argument:: pitchControl
A link::Classes/Symbol:: or link::Classes/String:: denoting the keyboard key, incoming note. Default: code::\freq::.
argument:: velocControl
A link::Classes/Symbol:: or link::Classes/String:: denoting velocity coming with the note. Default: code::\veloc::.
argument:: bendControl
A link::Classes/Symbol:: or link::Classes/String:: denoting the control to be set by the pitch bend wheel. Default: code::\bend::.
argument:: outControl
A link::Classes/Symbol:: or link::Classes/String:: denoting the output bus. Default: code::\out::.
argument:: includeInCVCenter
An link::Classes/Array:: of link::Classes/Symbol::s or link::Classes/String::s, denoting those of the before described arguments which emphasis::should:: appear in link::Classes/CVCenter:: though they have already been assigned to the keyboard.
argument:: theServer
Optional - the link::Classes/Server:: to run the link::Classes/Synth::s on produced with every keystroke.
argument:: outbus
Optional - an link::Classes/Integer:: denoting a default output bus (can be set in the SynthDef beforehand as well).
argument:: deactivateDefaultWidgetActions
When link::Classes/CVWidget::s are created from a running code::Classes/Synth:: these widgets will be added default actions to set the regarding controls in the Synth, which is not desirable in this case. However, actions will just get deactivated and can get re-activated at any time. Default: code::true::.
argument:: tab
Optional - a link::Classes/Symbol:: or link::Classes/String:: denoting the tab in which the link::Classes/CVWidget::s for the link::Classes/Synth:: instances will appear. If none is given the tab name will default the the SynthDef's name.
argument:: setSynthDef
A link::Classes/Boolean::. If set to code::true:: the CVCenterKeyboard instance can be played using the given link::Classes/SynthDef:: immediately (otherwise you will have to call link::#-setSynthDef:: explicitly). Default: code::false::.

DISCUSSION::

code::
// define SynthDef with a gated envelope
(
SynthDef(\multi, {
    var env = EnvGen.ar(
		Env.adsr(\atk.kr(0.01), \dec.kr(0.3), \sust.kr(0.5), \rel.kr(0.7)),
		\gate.kr(1), // we need a gated envelope!
		doneAction: Done.freeSelf // free the Synth when done
	);
	var freq = \freq.kr(220);
	var son = [SinOsc.ar(freq), Saw.ar(freq), Pulse.ar(freq)];
	var which = SelectX.ar(\which.kr(0!2) * son.size, son); // stereo select
	Out.ar(\out.kr(0), which * \veloc.kr(1) * \amp.kr(0.5) * env);
}).add
)

// a few specs for the controls
// specs with the same name as the regarding control
// will automatically be assigned to the control in CVCenter
(
Spec.add(\atk, #[0.01, 1.0], \exp);
Spec.add(\dec, #[0.1, 2.0]);
Spec.add(\sust, #[0.1, 1.0]);
Spec.add(\rel, #[0.1, 2.0, \exp]);
Spec.add(\which, #[0, 2]);
)

// create new keyboard, using pre-defined SynthDef
// will initialize MIDI and open CVCenter
~kb = CVCenterKeyboard.newSynthDef(\multi, \myKeyboard);

// set up controls and add CVWidgets for Synth controls
// this will boot the server and open a dialog for setting specs
// you will hear a short tone generated from a Synth instance of
// the given SynthDef which is needed by CVCenter to determine
// the Synth controls
(
~kb.setUpControls(
	\multi, // the SynthDef
    \kb, // a prefix for CVCenter, should make shure the resulting widgets have a unique names
    \freq, // the pitch argument, to be controlled through the MIDI keyboard keys
    \veloc, // the velocity argument
    \freq, // the bend argument - will often be the same as the pitch argument
    \out, // the argument setting the out bus
	setSynthDef: true // start keyboard using the given SynthDef immediately
)
)

// play some notes on your keyboard *after* having confirmed the CVCenter specs dialog
::

METHOD:: setSynthDef
This method may be called emphasis::implicitly:: for every new link::Classes/SynthDef:: in link::#-setUpControls:: by adding an argument code::setSynthDef:: set to code::true:: or it may be called emphasis::explicitly:: to switch between currently stored SynthDefs within the CVCenterKeyboard instance.

argument:: synthDefName
A link::Classes/String:: or a link::Classes/Symbol::, denoting the link::Classes/SynthDef:: to be selected.

DISCUSSION::
code::
// define another SynthDef
(
SynthDef(\syncSaw, {
	var sig, env;
	env = EnvGen.kr(Env.adsr(
		\atk.kr(0.03),
		\dec.kr(0.5),
		\sust.kr(0.5),
		\rel.kr(0.7)
	), \gate.kr(1), doneAction: Done.freeSelf);
	sig = SyncSaw.ar(
		\freq.kr(220),
		\sawFreq.kr(220!2, spec: \midfreq.asSpec) // specs can also be set implicitly
	);
	Out.ar(\out.kr(0), sig * env * \veloc.kr(1) * \amp.kr(0.5) * env)
}).add;
)

// add the SynthDef to the CVCenterKeyboard instance
~kb.addSynthDef(\syncSaw);

// set up controls
(
~kb.setUpControls(
	\syncSaw, // the SynthDef name
	\ss, // prefix in CVCenter
	\freq, // control played by the keyboard
	\veloc, // velocity argument
	\freq, // bend argument
	\out // out bus
)
)

// switch to the just added new SynthDef
~kb.setSynthDef(\syncSaw)

// play...

// switch back to the other SynthDef
~kb.setSynthDef(\multi)
::

METHOD:: clear
Clear link::Classes/SynthDef:: from a CVCenterKeyboard instance but don't remove it from the keyboard. This is used internally by link::#-setSynthDef:: before switching to a new SynthDef. You will usually not call this method directly.
argument:: synthDefName
A link::Classes/String:: or a link::Classes/Symbol::, denoting the link::Classes/SynthDef:: to be cleared.

METHOD:: free
Free the CVCenterKeyboard instance. You will not be able to use the CVCenterKeyboard instance any longer after calling this method.

METHOD:: freeHangingNodes
Frees all currently playing link::Classes/Node::s (link::Classes/Synth:: instances) on the link::Classes/Server:: belonging to the CVCenterKeyboard instance. This can be useful if, for some reason, a note "hangs" after releasing a key on the keyboard which could happen e.g. if the server is under heavy load. A CVCenterKeyboard instance will create all its link::Classes/Synth::s in a dedicated link::Classes/Group:: (respectively link::Classes/ParGroup:: if supernova is used as audio engine) which allows control the playing nodes via the group's interface.

METHOD:: addTouchOSC
Assosciate an instance of link::Classes/CVCenterKeyboardTouchOSC:: which allows the CVCenterKeyboard instance and an assigned link::Classes/CVCenterKeyboardRecorder:: instance (if it exists. See also: link::#-addRecorder::) to be controlled via pre-defined OSC commands comming and gong to TouchOSC or a different OSC control app installed on some external device within the current network. The link::Classes/CVCenterKeyboardTouchOSC:: instance can also be created by passing a link::Classes/NetAddr:: in the argument code::touchOSC:: when calling link::#*new:: or link::#*newSynthDef::. The link::Classes/CVCenterKeyboardTouchOSC:: instance will be accessible by calling link::#-touchOSC::.
argument:: addr
A class link::Classes/NetAddr::

SUBSECTION:: MIDI related Instance variables

METHOD:: on
The default link::Classes/MIDIFunc#*noteOn#noteOn:: function, added when creating a new CVCenterKeyboard instance. By default the function will only hold some debug code that gets executed when link::#-debug:: is set to code::true::.

METHOD:: off
The default link::Classes/MIDIFunc#*noteOff#noteOff:: function, added when creating a new CVCenterKeyboard instance. By default the function will only hold some debug code that gets executed when link::#-debug:: is set to code::true::.

METHOD:: bend
The default link::Classes/MIDIFunc#*bend#bend:: function, added when creating a new CVCenterKeyboard instance. By default the function will only hold some debug code that gets executed when link::#-debug:: is set to code::true::.

SUBSECTION:: MIDIFunc storage for added SynthDefs

The following three variables all implement an link::Classes/Event::, holding the individual code::noteOn::, code::noteOff:: and code::bend:: link::Classes/Function::s at a key identical to the corresponding link::Classes/SynthDef::. When calling link::Classes/MIDIFunc:: instance when calling link::#-setSynthDef#setSynthDef(\mySynthDef):: the corresponding Function in the Event will be link::Classes/AbstractResponderFunc#-add#added:: to the CVCenterKeyboard instance's default link::Classes/MIDIFunc:: instance (link::#-on::, link::#-off:: or link::#-bend::).

METHOD:: onFuncs
The functions to be executed for a code::noteOn::. To each of these functions the arguments code::veloc:: (velocity), code::num:: (the MIDI value for the key played on the keyboard), code::chan:: (the MIDI channel, if defined) and code::src:: (the MIDI device' unique ID, if defined) will be passed. If link::#-debug:: has been set to code::true:: the following output will be posted:
LIST::
## The name of the CVCenterKeyboard instance (link::#-keyboardDefName::)
## The current link::Classes/SynthDef::'s name (as stored within link::#-synthDefNames::)
## The MIDI value (code::num::) of the currently played key
## The MIDI channel (code::chan::)
## The unique ID of the MIDI device (code::src::)
## The names and current values of strong::all:: controls within the current link::Classes/SynthDef:: (respectively link::Classes/Synth:: instanced with the current keystroke)
::

METHOD:: offFuncs
The functions to be executed for a code::noteOff::. To each of these functions the arguments code::veloc:: (velocity), code::num:: (the MIDI value for the key played on the keyboard), code::chan:: (the MIDI channel, if defined) and code::src:: (the MIDI device' unique ID, if defined) will be passed. If link::#-debug:: has been set to code::true:: the following output will be posted:
LIST::
## The name of the CVCenterKeyboard instance (link::#-keyboardDefName::)
## The current link::Classes/SynthDef::'s name (as stored within link::#-synthDefNames::)
## The MIDI value (code::num::) of the currently played key
## The MIDI channel (code::chan::)
## The unique ID of the MIDI device (code::src::)
::

METHOD:: bendFuncs
The functions to be executed for a code::bend:: (when moving the the bend wheel). To each of these functions the arguments code::bendVal:: (the value coming from the bend wheel), code::chan:: (the MIDI channel, if defined) and code::src:: (the MIDI device' unique ID, if defined) will be passed. If link::#-debug:: has been set to code::true:: the following output will be posted:
LIST::
## The name of the CVCenterKeyboard instance (link::#-keyboardDefName::)
## The current link::Classes/SynthDef::'s name (as stored within link::#-synthDefNames::)
## The MIDI value (code::bend::) coming from the bend wheel
## The MIDI channel (code::chan::)
## The unique ID of the MIDI device (code::src::)
::

SUBSECTION:: Instance variables

METHOD:: debug
Acttivate or deactivate debugging. If set to code::true:: various output from code::noteOn::, code::noteOff:: and code::bend:: events will be posted.

METHOD:: currentSynthDef
returns:: The name of the currently used SynthDef as link::Classes/Symbol::.

METHOD:: synthParams
RETURNS:: An link::Classes/Event:: holding all link::Classes/ControlName::s of all currently stored link::Classes/SynthDef::s within a CVCenterKeyboard instance.

METHOD:: synthDefNames
returns:: A link::Classes/List::, filled with the names of the SynthDefs currently stored with the CVCenterKeyboard instance.

METHOD:: keyboardDefName
returns:: A link::Classes/Symbol:: representing the name of the CVCenterKeyboard instance. The name can will be set in link::#*new:: or link::#*newSynthDef::. If no name has been given it will default to code::\keyboard::.

METHOD:: group
returns:: The link::Classes/Group:: or link::Classes/ParGroup:: in which all link::Classes/Synth::s generated by the CVCenterKeyboard instance will be playing.

METHOD:: namesCVs
RETURNS:: An link::Classes/Event::, holding a link::Classes/List:: with the link::Classes/CVWidget:: instance names, the link::Classes/ControlName::s and the link::Classes/CV::s of all link::Classes/SynthDef::s currently stored with the CVCenterKeyboard instance. Usually this will not be of any use for the user but it is needed for sampling keyboard sequences. Hence, this variable must be public and can be used for introspection.

METHOD:: bendSpec
Set or get the link::Classes/ControlSpec:: for the pitch bend wheel. By default:
code::
ControlSpec(0.midicps.neg, 0.midicps, \lin, 0, 0, " hz")
::

METHOD:: pairs
RETURNS:: An link::Classes/Array:: containing all controls and link::Classes/CV:: instances of the currently used link::Classes/SynthDef:: (see: link::#-currentSynthDef::) that appear in link::Classes/CVCenter::.

METHOD:: valuePairs
returns:: An link::Classes/Array:: containing all controls and their current values of the  link::Classes/SynthDef:: (see: link::#-currentSynthDef::) that appear in link::Classes/CVCenter::.

METHOD:: out
Set or get the out link::Classes/Bus:: of the currently used link::Classes/SynthDef::.
returns:: An link::Classes/Integer::.

METHOD:: server
returns:: The link::Classes/Server:: used by the CVCenterKeyboard instance.

METHOD:: touchOSC
returns:: The link::Classes/CVCenterKeyboardTouchOSC:: instance associated with the CVCenterKeyboard instance if it exists.

SUBSECTION:: Adding an effects chain
Building an effects chain is accomplished by adding a link::Classes/NodeProxy:: or an link::Classes/Ndef:: catching the output of the link::Classes/Synth::s played with the keyboard. These can then be filtered by using link::Reference/NodeProxy_roles::. Only adding the NodeProxy or Ndef by calling link::#-addOutProxy:: will have no audible effect - the keyboard should just play as before adding the proxy.

METHOD:: addOutProxy
Add a link::Classes/NodeProxy:: or an link::Classes/Ndef::, catching the audio output of the CVCenterKeyboard instance.
argument:: numChannels
An link::Classes/Integer:: representing the number of output channels. Default: code::2::.
argument:: useNdef
If set to code::true:: the proxy will be created as link::Classes/Ndef::. By default the proxy will be a link::Classes/NodeProxy::.
argument:: transbus
Optional - an link::Classes/Integer:: represeting a link::Classes/Bus:: allowing the user to isolate effects and filters. This is handled by setting output bus of the CVCenterKeyboard instance to this bus. Ideally one will use a private bus, e.g: code::s.options.firstPrivateBus::.
argument:: outbus
Optional - an link::Classes/Integer:: represeting the link::Classes/Bus:: on which the filtered sound of the CVCenterKeyboard shall play. By default this will be the out bus of the CVCenterKeyboard instance.

METHOD:: removeOutProxy
Remove the link::Classes/NodeProxy:: or link::Classes/Ndef:: added by link::#-addOutProxy::.
argument:: outbus
If the argument code::transbus:: in link::#-addOutProxy:: has been given one needs to re-set the out bus of the CVCenterKeyboard instance.

METHOD:: outProxy
returns:: The proxy created by calling link::#-addOutProxy::.

SUBSECTION:: Recording sequences

METHOD:: addRecorder
To be able to record keystrokes on the keyboard a link::Classes/CVCenterKeyboardRecorder:: has to be assigned. By default this is already done when calling link::#*new:: or link::#*newSynthDef:: if the argument code::addRecorder:: hasn't explicitly been set to code::false:: (given that link::Classes/CVCenterKeyboardRecorder:: is installed, which should be the case as its part of the CVCenterKeyboard library).

METHOD:: record
A convenience method, calling link::Classes/CVCenterKeyboardRecorder#-record::.
Start or stop recording keyboard sequences. The link::Classes/CVCenterKeyboardRecorder:: instance should keep track of its state internally (is currently it recording or not), so, the argument code::onOff:: should be optional. However, it might be convenient to tell the recorder explicitly to start or stop in some situations.
argument:: onOff
Optional - by default the link::Classes/CVCenterKeyboardRecorder:: should remember its internal state (is it currently sampling or not). The parameter allows you to set the state explicitly.

METHOD:: recorder
returns:: The link::Classes/CVCenterKeyboardRecorder:: instance, giving access to all methods of the link::Classes/CVCenterKeyboardRecorder:: instance.

SUBSECTION:: Controlling synth controls through busses
Controls within link::Classes/Synth:: instances created when playing the keyboard may also be controlled through busses.

code::
// using the CVCenterKeyboard instance that has been created above,
// controlling 'which' in SynthDef 'multi'
(
Ndef(\sawFreq, {
	LFNoise2.ar([30, 30]).range(20, 300)
})
)

~kb.setSynthDef(\syncSaw);
~kb.mapBus(\sawFreq, Ndef(\sawFreq).bus);
::

METHOD:: mapBus
Map a link::Classes/Bus:: to a link::Classes/Synth:: control. The bus can be code::control:: or code::audio:: rate.
argument:: ctrlname
A link::Classes/Symbol:: referencing the control in the link::Classes/Synth:: that shall be set by the link::Classes/Bus::.
argument:: bus
The audio or control rate link::Classes/Bus:: that will set the control in the link::Classes/Synth:: instance.

METHOD:: unmapBus
The opposite to link::#-mapBus:: - delegate control over the given link::Classes/ControlName:: back to manual control by the user.
argument:: ctrlname
A link::Classes/Symbol:: referencing the link::Classes/ControlName:: whose control should be delegated to the user again.

METHOD:: mappedBusses
returns:: An link::Classes/Event:: holding all currently mapped busses. The keys will be link::Classes/ControlName::s that get set by the bus(ses) referenced by the assigned bus indexes.

PRIVATE:: init, initClass, prAddWidgetActionsForKeyboard, prEnvInit, prInitCVs, prInitSynthDef, prInitKeyboard

