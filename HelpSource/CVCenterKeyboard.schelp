TITLE:: CVCenterKeyboard
summary:: A MIDI keyboard implementation for CVCenter
categories:: Conductor>CVCenter, External Control>MIDI
related:: Classes/CVCenter, Guides/UsingMIDI

DESCRIPTION::
CVCenterKeyboard lets you create a link::Guides/UsingMIDI##MIDI keyboard:: layout instantly from any SynthDef that provides
a code::\gate:: key, meaning that a Synth that has been instiated upon receiving a note-on message
gets finished when it gets a not-off message from an external MIDI keyboard. That allows for playing sustained notes that
can be controlled through code::asr:: or code::adsr:: envelopes.

Seting up the keyboard basically involves to steps: First instantiating a keyboard
(through link::#-new:: or link::#-newSynthDef::) and then setting up the keyboard
for a given SynthDef through link::-setUpControls:: (will start the Server).

You can assign four arbitray controls from your SynthDef to the following standard parameters

DEFINITIONLIST::
## outControl
|| the arg that sets the output bus of the Synth
## keyboardControl
|| what ever you want to play with your keyboard (e.g. Frequency). You'll get midi notes back
## velocControl
|| whatever you want to control through keyboard velocity
## bendControl
|| whatever you want to control through the pitch bend weal (the internal control
	will automatically assigned a spec code::ControlSpec(0.midicps.neg, 0.midicps, \lin, 0, 0, " hz")::)
::

All other controls you may have defined in your SynthDef will automatically be picked up by the setup process and get assigned appropriate widgets automatically.

Especially after loading an already existing CVCenter setup you possibly have to re-init the keyboard through link::-reInit::

Additionally an output proxy - a link::Classes/NodeProxy:: or an link::Classes/Ndef:: - can be added through link::-addOutProxy:: which allows you to do filtering and all kinds of NodeProxy trickery.

CLASSMETHODS::

METHOD:: all
returns:: an link::Classes/Event::, containing all instantiated Keyboards

METHOD:: new
argument:: name
Instanciate a new keyboard under code::name::. The keyboard will be accessible under code::CVCenterKeyboard.all[name]::
returns:: a CVCenterKeyboard

METHOD:: newSynthDef
argument:: synthDefName
a link::Classes/Symbol:: or link::Classes/String::, identifying an already declared link::Classes/SynthDef:: to be used with the new CVCenterKeyboard instance.
The SynthDef must have defined an envelop and a code::\gate:: argument.
argument:: keyboardName
a link::Classes/Symbol:: or link::Classes/String::, identifying the CVCenterKeyboard. The keyboard will be accessible at this key within the code::CVCenter.all:: variable.
argument:: connectMidi
if set to code::true:: immediately connect the external MIDI keyboard (default: code::true::)
returns:: a CVCenterKeyboard

METHOD:: initClass

METHOD:: at
argument:: keyboardName


INSTANCEMETHODS::

METHOD:: setUpControls
Set up the keyboard for the specified link::Classes/SynthDef::. The SynthDef must already have been added beforehand,
either when creating the keyboard with link::#*newSynthDef:: or link::#-addSynthDef::. code::setUpControls:: will analyze
the internal control structure of the SynthDef and create a set of appropriate link::Classes/CVWidget::s within link::Classes/CVCenter::.
Some controls, however, must be reserved for the control through the MIDI keyboard keys: an argument for pitch, one for velocity
and a bend argument as well as one for the output bus.

code::
// define a SynthDef
// notice the enevlope and gate
(
SynthDef(\pmosc, {
	var env = Env.adsr(\atk.kr(0.01), \dec.kr(0.3), \sust.kr(0.5), \rel.kr(0.7));
	var son = PMOsc.ar(
		\carfreq.kr(100),
		\modfreq.kr(300!2, 0.02),
		\pmindex.kr(0!2, 0.02),
		\modphase.kr(0!2, 0.02)
	);
	env = EnvGen.ar(env, \gate.kr(1), doneAction: Done.freeSelf);
	Out.ar(\out.kr(0), son * \veloc.kr(1) * \amp.kr(0.5) * env);
}).add;
)

// set a couple of useful specs ahead from keyboard creation
(
Spec.add(\atk, #[0.01, 1.0]);
Spec.add(\dec, #[0.1, 2.0]);
Spec.add(\sust, #[0.1, 1.0]);
Spec.add(\rel, #[0.1, 2.0, \exp]);
Spec.add(\carfreq, #[40, 2000, \exp]);
Spec.add(\modfreq, #[40, 2000, \exp]);
Spec.add(\pmindex, #[0, 30]);
Spec.add(\modphase, \phase);
)

// create a new keyboard and add the given SynthDef
~kb = CVCenterKeyboard.newSynthDef(\pmosc, \myKeyboard);

(
~kb.setUpControls(
	\pmosc, // the SynthDef
	\kb, // a prefix for CVCenter, should make shure the resulting widgets have a unique names
	\carfreq, // the pitch argument, to be controlled through the MIDI keyboard keys
	\veloc, // the velocity argument
	\carfreq, // the bend argument - will often be the same as the pitch argument
	\out, // the argument setting the out bus
);
)
// in case a keyboard doesn't play... won't do no harm
~kb.reInit(\pmosc);
::


argument:: synthDefName
the link::Classes/SynthDef::'s name
argument:: prefix
an optional link::Classes/Symbol:: or link::Classes/String:: for CVCenter, to make sure the resulting widgets get a unique name.
argument:: pitchControl
a link::Classes/Symbol:: or link::Classes/String:: denoting the keyboard key, incoming note. Default: code::\freq::
argument:: velocControl
a link::Classes/Symbol:: or link::Classes/String:: denoting velocity coming with the note. Default: code::\veloc::
argument:: bendControl
a link::Classes/Symbol:: or link::Classes/String:: denoting the pitch bend wheel. Default: code::\bend::
argument:: outControl
a link::Classes/Symbol:: or link::Classes/String:: denoting the output bus. Default: code::\out::
argument:: includeInCVCenter
an link::Classes/Array:: of link::Classes/Symbol::s or link::Classes/String::s, denoting those of the afore described arguments which emphasis::should:: appear in CVCenter though they have already been assigned to the keyboard
argument:: theServer
optional: the link::Classes/Server:: to rum the link::Classes/Synth:: on
argument:: out
optional: an link::Classes/Integer:: denoting a default output bus (can be set in the SynthDef beforehand as well)
argument:: deactivateDefaultWidgetActions
a link::Classes/Boolean::, denoting if default widget actions should be deactivated (default: code::true::)
argument:: srcID
optional: an link::Classes/Integer::, denoting the source ID of a MIDI device (see also: link::Guides/UsingMIDI::)
argument:: tab
optional: a link::Classes/Symbol:: or link::Classes/String:: denoting the tab in which the CVWidgets for this given Synth will appear. If none is given the tab name will default the the SynthDef's name

METHOD:: addSynthDef
Add a new link::Classes/SynthDef:: to an already existing CVCenterKeyboard.
argument:: synthDefName
A link::Classes/String:: or link::Classes/Symbol::, denoting the name of the SynthDef.
The SynthDef must already exist.
argument:: connectMidi
A link::Classes/Boolean::, indicating whether the given SynthDef should immediately be
connected to the physical keyboard. Default: code::false::.
returns:: a CVCenterKeyboard

METHOD:: reInit
It may happen that the physical keyboard doesn't respond, e.g. after loading a link::Classes/CVCenter#*loadSetup#CVCenter setup::.
This short command will recreate the keyboard internally without any further user interaction. Optionally the name of the SynthDef for
which the keyboard shall recreated may be given.
argument:: synthDefName
optional - a link::Classes/Symbol::, denoting the link::Classes/SynthDef:: you want to reinitialize.

METHOD:: currentSynthDef
The CVCenterKeyboard must have been set up through calling link::#-setUpControls:: before.
returns:: a link::Classes/Symbol::, denoting the SynthDef currently used with the CVCenterKeyboard instance

METHOD:: synthDefNames
returns:: an link::Classes/Array:: of link::Classes/Symbol::s, denoting all SynthDefs that have been added to the CVCenterKeyboard instance

METHOD:: switchSynthDef
Switch to a different SynthDef. The SynthDef must have been added emphasis::and:: set up beforehand.
argument:: synthDefName
returns:: a CVCenterKeyboard

METHOD:: out
Set or get the Synth out bus.

METHOD:: controls
returns:: an link::Classes/Event:: holding the controls the emphasis::all SynthDefs:: as passed in with link::#-setUpControls::.
The SynthDef names are the keys for the sub Events.



METHOD:: addOutProxy
argument:: synthDefName
argument:: numChannels
argument:: useNdef

METHOD:: clearSamples
argument::  ... indices

METHOD:: prResetSampling

METHOD:: prInitCVs
argument:: synthDefName
argument:: args

METHOD:: init

METHOD:: bendSpec

METHOD:: pdef

METHOD:: initSynthDef
argument:: synthDefName
argument:: connectMidi
argument:: keyboardName

METHOD:: removeOutProxy
argument:: synthDefName
argument:: out

METHOD:: debug

METHOD:: sample

METHOD:: activateSampling
argument:: onOff
argument:: synthDefName

METHOD:: prAddWidgetActionsForKeyboard
argument:: synthDefName
argument:: deactivateDefaultActions

METHOD:: prInitKeyboard
argument:: synthDefName

METHOD:: server

METHOD:: name

METHOD:: wdgtNames

METHOD:: outProxy

METHOD:: free
argument:: synthDefName

METHOD:: sampleEvents

METHOD:: prMidiInit
argument:: synthDefName
argument:: connectMidi

METHOD:: prDurSum
argument:: durs


EXAMPLES::

code::
_some_example_code_
::
